<?php

abstract class AbstractQuery{


/**
 * 
 */
public $filter_count = 0;  


/**
 * Limits query to entries submitted by a particular uid (e.g. author)
 * @var integer
 */
public $uid;

/**
 * Earliest entry date to include
 * stored as unix timestamp
 */
public $start_date;

/**
 * Latest entry date to include
 */
public $end_date;

/**
 * @var integer number of prior days to list by default 
 */
public $default_days = 30;

/**
 * @var string to search body for
 */
public $search_str;

/**
 * Max results on one page of paginated results
 */
public $entries_per_page = 50;


public $sort_field;

protected $sort_direction = 'desc';

/**
 * Group entries by (DAY, SHIFT, )
 */
public $group_by = 'SHIFT';


/**
* A map of which hours belong to which shift.
* Useful when grouping by shifts.
*/
protected $ops_shifts = array('OWL','OWL','OWL','OWL','OWL','OWL','OWL',
                            'DAY','DAY','DAY','DAY','DAY','DAY','DAY','DAY',
                            'SWING','SWING','SWING','SWING','SWING','SWING','SWING','SWING',
                            'OWL');


public function __construct(){
  
  $d = getdate(); //current date/time
  $this->setEndDate(mktime(24,0,0,$d['mon'],$d['mday'],$d['year']));
  $this->setStartDate(mktime(0,0,0,$d['mon'],$d['mday'] - $this->default_days,$d['year']));
  //$n = $this->default_days;
  //$this->start_date = strtotime("-$n days");
  //$this->end_date = strtotime('+1 days');
}


/**
 * Generates a drupal db_select query built from the object properties
 * that have been set.
 * @todo use mysql greatest() function to return most recent of node ->changed
 *       or node->last_comment_timestamp;
 * @return SelectQuery
 * @see http://api.drupal.org/api/drupal/includes!database!select.inc/class/SelectQuery/7
 */
abstract function getDBQuery();

/**
 * Returns the array of data generated by getDBQuery properly grouped.
 * @return array
 */
abstract function getDBQueryResults();


/**
 * Sets the field on which to sort.
 * Note:  The incoming parameter matches the column heading
 *        the user click and needs to be mapped to a database column.
 * @param type $val
 */
abstract function setSortField($val);

/**
 * Accepts an associative array and applies each 
 * @param var $settings
 */
public function applyDisplaySettings($settings){
  foreach ($settings as $name => $value){
    //mypr("applying $name => $value");
    if (property_exists(get_class($this), $name)){
      $this->$name = $value;
    }
  }
  //mypr($this);
}

/**
 * Sets a start (min) date for query results
 * @param mixed $date timestamp, string, or array('date'=>str, 'time'=>str)
 */
public function setStartDate($date){
  if (is_numeric($date)){
    $this->start_date = $date;
  }elseif (is_string($date) && $date != ''){
   $this->start_date = strtotime($date);
  }else if (is_array($date)){
   if (array_key_exists('date', $date) && array_key_exists('time', $date)){
     if ($date['date']){
       if (! $date['time']){
         $date['time'] = '00:00';
       }
      $this->start_date = strtotime(sprintf("%s %s", $date['date'], $date['time']));
     }
   } 
 }else{
   $n = $this->default_days;
   $this->setStartDate($this->autoStartDate($this->end_date));
   //$this->start_date = strtotime("-$n days", $this->end_date);
 }
 if ($this->start_date > $this->end_date){
   drupal_set_message('Ignored invalid "From" start date after requested "To" end date!', 'error');
 }
}

/**
 * Sets an end (max) date for query results
 * @param mixed $date timestamp, string, or array('date'=>str, 'time'=>str)
 */
public function setEndDate($date){
  if (is_numeric($date)){
    $this->end_date = $date;
  }elseif (is_string($date)){
   $this->end_date = strtotime($date);
 }elseif (is_array($date)){
   if (array_key_exists('date', $date) && array_key_exists('time', $date)){
     $this->end_date = strtotime(sprintf("%s %s", $date['date'], $date['time']));
   } 
 }
 // Force the start date to be before end date.
 if ($this->end_date <= $this->start_date){
   $n = $this->default_days;
   $this->setStartDate($this->autoStartDate($this->end_date));
   //$this->setStartDate(strtotime("-$n days", $this->end_date));
 }
}

protected function autoStartDate($end_date){
  $n = $this->default_days;
  $start_exact = strtotime("-$n days", $end_date);
  $start_midnight = strtotime(date('Y-m-d 00:00', $start_exact));
  return $start_midnight;
}

/**
 * Adds an author filter
 * @param mixed $author
 */
public function addAuthor($author){
  if (is_object($author)){
    if ($author->uid > 0){
      $this->uid = $author->uid;
    }
  }elseif(is_numeric($author)){
    $this->uid = $author;
  }elseif($u = user_load_by_name($author)){
    $this->uid = $u->uid;
  }
}


public function setSearchStr($str){
  $this->search_str = $str;
}

/**
 * Accepts an associative array of the format produced
 * by php's $_GET or $_POST and pulls out values that
 * are recognized as valid filters.
 * @param array $var 
 */
public function addFiltersFromArray($var){
  $added = 0;
  // Important to set the end date first
  if (array_key_exists('end_date', $var)){
    $this->setEndDate($var['end_date']);
    $this->setStartDate(null);
  }
  // Remaining filters in arbitrary order.
  foreach ($var as $key => $val) {
    switch ($key) {
     case 'start_date'   : $this->setStartDate($var['start_date']); 
                            $added++; 
                            break;  
     case 'search_str'   : $this->setSearchStr($var['search_str']); 
                            $added++; 
                            break;                       
     case 'order'         : $this->setSortField($val);
                            break;
     case 'sort'          : $this->setSortDirection($val);
                            break;
    }
  }
  if ($added > 0){
    $this->filter_count = $added;
  }
}


/**
 * 
 * @param type $val
 */
function setSortDirection($val) {
  if (strtolower($val) == 'desc' || strtolower($val) == 'asc' ){
    $this->sort_direction = strtolower($val);
  }
}




} //class